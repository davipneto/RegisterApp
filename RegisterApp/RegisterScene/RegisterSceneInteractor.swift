//
//  RegisterSceneInteractor.swift
//  RegisterApp
//
//  Created by Curitiba01 on 16/09/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

typealias RegisterSceneInteractorInput = RegisterSceneViewControllerOutput

protocol RegisterSceneInteractorOutput {
    func didFormatDate(_ dateString: String)
    func fieldsNotValid()
    func registerDidFail(errorMessage: String)
    func registerDidSucceed()
}

class RegisterSceneInteractor: RegisterSceneInteractorInput {
    private let dateFormatter = DateFormatter()
    var presenter: RegisterSceneInteractorOutput?
    
    init() {
        setupDateFormatter()
    }
    
    private func setupDateFormatter() {
        dateFormatter.dateStyle = .short
        dateFormatter.timeStyle = .none
    }
    
    func validateFields(_ textFields: [UITextField]) {
        let validators = Validators(minimumSizeForPassword: 6, textFields: textFields)
        let isValid = validators.validateAllFields()
        if isValid {
            registerUser(email: validators.getEmail(), pass: validators.getPassword())
        } else {
            presenter?.fieldsNotValid()
        }
    }
    
    func formatDate(date: Date) {
        let dateString = dateFormatter.string(from: date)
        presenter?.didFormatDate(dateString)
    }
    
    private func registerUser(email: String, pass: String) {
        ReqressAPI.shared.register(email: email, password: pass) { [weak self] registerResponse, error in
            if let error = error {
                self?.presenter?.registerDidFail(errorMessage: error.localizedDescription)
            } else if let registerResponse = registerResponse {
                let token = registerResponse.token
                if let data = token.data(using: .utf8) {
                    try? KeychainHelper.addItem(server: ReqressAPI.server, account: email, data: data)
                }
                self?.presenter?.registerDidSucceed()
            }
        }
    }
}
